fn donut(x, y, z) {
    var radius = 0.4;
    var thickness = 0.3;
    var xy_d = math.sqrt(x*x + y*y) - radius;
    var d = math.sqrt(xy_d*xy_d + z*z);
    return d - thickness / 2;
}

fn normal(sdf, x, y, z) {
    var ε = 0.001;
    var n_x = sdf(x + ε, y, z) - sdf(x - ε, y, z);
    var n_y = sdf(x, y + ε, z) - sdf(x, y - ε, z);
    var n_z = sdf(x, y, z + ε) - sdf(x, y, z - ε);
    var norm = math.sqrt(n_x*n_x + n_y*n_y + n_z*n_z);
    return [n_x / norm, n_y / norm, n_z / norm];
}

fn sample(x, y) {
    var z = -10;
    for (var _step in range(30)) {
      var θ = time.timef() * 2;
      var t_x = x * math.cos(θ) - z * math.sin(θ);
      var t_z = x * math.sin(θ) + z * math.cos(θ);
      var d = donut(t_x, y, t_z);
      if (d <= 0.01) {
          var res = normal(donut, t_x, y, t_z);
          var nt_y = res[1];
          var nt_z = res[2];
          var is_lit = nt_y < -0.15;
          var is_frosted = nt_z < -0.5;
          if (is_frosted) {
              if (is_lit) {
                return '@';
              } else {
                return '#';
              }
          }
          else {
            if (is_lit) {
                return '=';
            } else {
                return '.';
            }
          }
      }
      else {
          z += d;
      }
    }
    return ' ';
}

while (true) {
    var frame_chars = [];
    for (var y in range(20)) {
        for (var x in range(80)) {
            var remapped_x = x / 80.0 * 2 - 1;
            var remapped_y = (y / 20.0 * 2 - 1) * (2 * 20.0 / 80);
            frame_chars.append(sample(remapped_x, remapped_y));
        }
        frame_chars.append('\n');
    }
    print('\x1b[2J' + ''.join(frame_chars));
    time.sleep(1.0 / 30);
}
