// 烟花，鼠标点击发射烟花
con canvas_enum = import("canvas_enum.dai");

con fireworks = [];
con particles = [];


fn hslToRgb(h, s, l) {
    // Calculate chroma
    con c = (1 - abs(2 * l - 1)) * s;
    // Calculate intermediate value
    con x = c * (1 - abs((h / 60) % 2 - 1));
    // Calculate the match value
    con m = l - c / 2;

    var r1 = 0;
    var g1 = 0;
    var b1 = 0;

    if (h < 60) {
        r1 = c;
        g1 = x;
        b1 = 0;
    }
    elif (h < 120) {
        r1 = x;
        g1 = c;
        b1 = 0;
    }
    elif (h < 180) {
        r1 = 0;
        g1 = c;
        b1 = x;
    }
    elif (h < 240) {
        r1 = 0;
        g1 = x;
        b1 = c;
    }
    elif (h < 300) {
        r1 = x;
        g1 = 0;
        b1 = c;
    }
    else {
        r1 = c;
        g1 = 0;
        b1 = x;
    }

    // Convert to RGB scale [0,255]
    con r = int((r1 + m) * 255);
    con g = int((g1 + m) * 255);
    con b = int((b1 + m) * 255);

    return [r, g, b];
}


class Firework {
    // 初始位置
    var x;
    var y;
    // 目标位置
    var tx;
    var ty;
    var speed;  // 速度
    var angle;  // 角度
    var vx;  // x 方向速度
    var vy;  // y 方向速度
    var distanceToTarget;  // 到目标的距离
    var traveled;  // 已经移动的距离
    var dead = false;

    fn __init__(x, y, targetX, targetY) {
        self.x = x;
        self.y = y;
        self.tx = targetX;
        self.ty = targetY;
        self.speed = 3;
        self.angle = math.atan2(targetY - y, targetX - x);
        self.vx = math.cos(self.angle) * self.speed;
        self.vy = math.sin(self.angle) * self.speed;
        self.distanceToTarget = math.hypot(targetX - x, targetY - y);
        self.traveled = 0;
    }

    fn update() {
        self.x += self.vx;
        self.y += self.vy;
        self.traveled += self.speed;
        if (self.traveled >= self.distanceToTarget) {
            // 到达目标
            self.dead = true;
            createParticles(self.x, self.y);
        }
    }

    fn draw() {
        con rgb = hslToRgb(int(math.random() * 360), 1, math.random());
        con center = canvas.Point(self.x, self.y);
        canvas.fillCircle(center, 2, rgb[0], rgb[1], rgb[2], 255);
    }
}


class Particle {
    var x;
    var y;
    var speed;
    var angle;
    var vx;
    var vy;
    var gravity = 0.05;
    var alpha = 1;
    var decay;
    var rgb;
    var dead = false;

    fn __init__(x, y) {
        self.x = x;
        self.y = y;
        self.speed = math.random() * 5 + 1;
        self.angle = math.random() * math.pi * 2;
        self.vx = math.cos(self.angle) * self.speed;
        self.vy = math.sin(self.angle) * self.speed;
        self.decay = math.random() * 0.01 + 0.005;
        self.rgb = [int(math.random() * 255), int(math.random() * 255), int(math.random() * 255)];
    }

    fn update() {
        self.vx *= 0.98;
        self.vy *= 0.98;
        self.vy += self.gravity;
        self.x += self.vx;
        self.y += self.vy;
        self.alpha -= self.decay;
        if (self.alpha <= 0) {
            self.dead = true;
        }
    }

    fn draw() {
        con center = canvas.Point(self.x, self.y);
        canvas.fillCircle(center, 2, self.rgb[0], self.rgb[1], self.rgb[2], int(self.alpha * 255));
    }
}


fn createParticles(x, y) {
    for (var i in range(60)) {
        con particle = Particle(x, y);
        particles.append(particle);
    }
}


fn draw() {
    // 覆盖一层半透明黑色，实现移动残影效果
    canvas.fillRect(
        0,
        0,
        canvas.width,
        canvas.height,
        0,
        0,
        0,
        100,
    );

    var daedFireworks = [];
    for (var firework in fireworks) {
        firework.update();
        firework.draw();
        if (firework.dead) {
            daedFireworks.append(firework);
        }
    }

    var daedParticles = [];
    for (var particle in particles) {
        particle.update();
        particle.draw();
        if (particle.dead) {
            daedParticles.append(particle);
        }
    }

    // 删除已死亡的烟花
    for (var firework in daedFireworks) {
        fireworks.remove(firework);
    }
    // 删除已死亡的粒子
    for (var particle in daedParticles) {
        particles.remove(particle);
    }

    if (len(daedFireworks) > 0) {
        print("Memory", sys.memory());
    }
}


fn main() {
    canvas.init(800, 600);

    canvas.addEventListener(canvas.EventMouseDown, fn(event) {
            con firework = Firework(canvas.width / 2, canvas.height, event.x, event.y);
            fireworks.append(firework);
        });

    canvas.run(1000 / 120, draw);
}

main();
