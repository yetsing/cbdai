// canvas_enum.dai 包含 canvas 的枚举值，包括键盘 code 和鼠标 button
con canvas_enum = import("canvas_enum.dai");

var loop = 0;
var index = 0;

fn draw() {
    loop += 1;
    if (loop % 30 == 0) {
        index = (index + 1) % 4;
    }

    // canvas.clear() 清空 canvas 的内容
    canvas.clear();

    var script_dir = Path(__file__).parent();
    var img_path = script_dir.joinpath("example.jpeg");
    // canvas.loadImage(path) 加载图片
    var img = canvas.loadImage(img_path.string());
    // ref: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage
    // 参考浏览器的 canvas drawImage API ，有三种传参
    if (index == 0) {
        // canvas.drawImage(image, dx, dy) 绘制图片
        canvas.drawImage(img, 0, 0);
    }
    elif (index == 1) {
        // canvas.drawImage(image, dx, dy, dWidth, dHeight) 绘制图片
        canvas.drawImage(img, 50, 50, img.width, img.height);
    }
    elif (index == 2) {
        // canvas.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) 绘制图片
        canvas.drawImage(img, 50, 50, img.width, img.height, 100, 100, img.width, img.height);
    }
    elif (index == 3) {
        // drawImageEx(image, srcrect, dstrect, angle, center, flip)
        //   image 图片
        //   srcrect 源矩形区域
        //   dstrect 目标矩形区域
        //   angle 旋转角度
        //   center 旋转中心
        //   flip 翻转方式， canvas_enum.FlipMode
        var srcrect = canvas.Rect(0, 0, img.width, img.height);
        var dstrect = canvas.Rect(0, 0, img.width, img.height);
        var angle = 45;
        var center = canvas.Point(img.width / 2, img.height / 2);
        var flip = canvas_enum.FlipMode.none;
        canvas.drawImageEx(img, srcrect, dstrect, angle, center, flip);
    }

    // canvas.present() 展示 canvas 的内容
    canvas.present();

    time.sleep(1/30.0);

    // example.jpeg 来源
    // <a href="https://pixnio.com/zh/media/zh-3263527">照片</a> 者 <a href="https://pixnio.com/zh/author/m_yabandeh">Maysam Yabandeh</a> 从 <a href="https://pixnio.com/zh/">Pixnio</a>
}

fn main() {
    print("Canvas example");
    canvas.init(1524, 1024); // Reduced canvas size

    // canvas.addEventListener(event_type, callback) 添加事件监听器
    // event_type 事件类型
    //      canvas.EventKeyDown 键盘按下事件
    //      canvas.EventKeyUp 键盘抬起事件
    //      canvas.EventMouseDown 鼠标按下事件
    //      canvas.EventMouseUp 鼠标抬起事件
    //      canvas.EventMouseMotion 鼠标移动事件
    // callback 回调函数接受一个参数 event
    canvas.addEventListener(canvas.EventKeyDown, fn(event) {
        // 键盘事件 KeyBoardEvent 包括下列字段
        //   code int 键码
        //   key str 字符串键值
        //   altKey bool 是否按下 Alt 键
        //   ctrlKey bool 是否按下 Ctrl 键
        //   shiftKey bool 是否按下 Shift 键
        //   metaKey bool 是否按下 command/windows 键
        //   repeat bool 是否重复按下
        print(event, "Key pressed:", event.code, event.key);
        print("    Alt:", event.altKey, "Ctrl:", event.ctrlKey, "Shift:", event.shiftKey, "Meta:", event.metaKey);
        if (event.code == canvas_enum.Keycode.key_a) {
            print("    A pressed");
        } elif (event.code == canvas_enum.Keycode.key_escape) {
            print("    Escape pressed");
            // 调用 canvas.quit() 退出 canvas
            canvas.quit();
        }
    });
    canvas.addEventListener(canvas.EventMouseDown, fn(event){
        // 鼠标事件 MouseEvent 包括下列字段
        //   x float 鼠标在 canvas 上的 x 坐标
        //   y float 鼠标在 canvas 上的 y 坐标
        //   button int 鼠标按键 0:左键 1:中键 2:右键
        print(event, "Mouse pressed:", event.x, event.y, event.button);
    });
    // canvas.addEventListener(canvas.EventMouseMotion, fn(event){
    //     print(event, "Mouse move:", event.x, event.y, event.button);
    // });

    // canvas.run(callback) 接收一个无参函数作为参数
    // 在窗口关闭或者调用 canvas.quit() 后返回
    canvas.run(draw);
    print("Canvas quited");
}

main();